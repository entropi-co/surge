// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package schema

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO auth.users(id, email, username, encrypted_password, created_at, updated_at)
values ($1, $2, $3, $4, now(), now())
RETURNING id, email, username, encrypted_password, created_at, updated_at
`

type CreateUserParams struct {
	ID                uuid.UUID
	Email             sql.NullString
	Username          sql.NullString
	EncryptedPassword sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AuthUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.EncryptedPassword,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
